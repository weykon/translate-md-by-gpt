{"version":3,"sources":["../main.ts","../pmt_set.ts"],"sourcesContent":["import dotenv from 'dotenv';\nimport { prompt,en_prompt ,pmt} from './pmt_set';\nimport * as ai from 'ai-say';\nimport { ChatCompletionRequestMessage } from 'openai';\n\ndotenv.config();\nai.aisay.config({\n    organization: process.env.ORG!,\n    apiKey: process.env.OPENAI_CHATGPT_KEY!\n});\nconst testString = `# This Readme is my first readme in github action\n- A Game Engine in Rust\n- One Mono Repo for all my projects\n## Usage\n- [ ] 1. Create a new repo\n- [ ] 2. Copy the content of this repo into the new repo\n\\`\\`\\`\nconsole.log('Hello World');\n\\`\\`\\`\n`\n// console.log(testString)\nasync function main() {\n    // const chats: ChatCompletionRequestMessage[] = [\n    //     { role: 'system', content: pmt, },\n    //     { role: 'assistant', content: '明白' },\n    //     { role: 'user', content: testString },\n    // ]\n    // const res = await ai.chat(chats, 'gpt-3.5-turbo')\n    // console.log(res.data.choices[0].message );\n\n    const res = await ai.one_ask({\n        model: 'text-davinci-003',\n        prompt:  pmt+`Input(${testString},chinese)`,\n        max_tokens: 2000,\n    });\n    console.log(res.data.choices[0]);\n}\n\nmain();\n\n\n","export const prompt = `\n你将会接收到一段Markdown文本,其中的每一段落是%src%,对应%src%作翻译得出的文本记录为%trl%.\n先判断是否以#或者-或者*开头,有保持markdown的格式.\n然后每个[src]的下方都添加[trl],[trl]是他们的中文翻译.\n将段落按照规则加入 %src%和%trl%标记，并输出。\n%src%: # This Readme will build from github action\n%trl%: # 这个Readme将会从github action中构建\n%src%: As the past year, I learn a lot from open source.\n%trl%: 过去的一年，我从开源中学到了很多。\n%src%: But I am clear now that I wrote some simple code in the past.\n%trl%: 但是我现在很清楚，我过去写了一些简单的代码。\n%src%: There no more technical.\n%trl%: 没有更多的技术了。\n%src%: So I decide enroll in some lower level systematic code, such as\n%trl%: 所以我决定报名一些较低级别的系统代码，例如\n%src%: - ESC(Entity System Component) for game\n%trl%: - 游戏ESC(Entity System Component)\n%src%: - Machine Learning\n%trl%: - 机器学习\n%src%: - Backend into some auth manager\n%trl%: - 后端进入一些认证管理器\n%src%: - Computer Graphics In Rust\n%trl%: - Rust中的计算机图形学\n%src%: ## These are goals in 2023 year!\n%trl%: ## 这些是2023年的目标!\n%src%: **Let's do it.**\n%trl%: **让我们做到这一点。**\n---\n以上的例子，明白了吗？ 如果明白，回复\"我是markdown翻译官, 请让我翻译吧\", 接下来等待我发出的多个段落的%src%,请你把所有的%src%:和%trl%:按上面这个规则输出来.\n`\n\nconst md_regular = `标题：使用#（井号）表示标题，一个#表示一级标题，两个#表示二级标题，以此类推。\n段落：段落之间用一个或多个空行隔开。\n列表：使用符号“-”或“*”表示无序列表，使用数字和点号表示有序列表。\n引用：使用“>”符号表示引用。\n代码块：使用“'”（反引号）表示代码块，可以在反引号后面指定代码的语言类型。\n粗体和斜体文本：使用“**”表示粗体，使用“*”表示斜体。\n链接：使用“[]()”表示链接，方括号里是链接文字，圆括号里是链接地址。\n图片：使用“![]()”表示图片，方括号里是图片文字，圆括号里是图片地址。`\n\n// 108 tokens   518chars\nconst compose_prompt_from_gpt = `\n您将接收到一段Markdown文本，其中每个段落都标有%src%，相应的翻译文本标为%trl%。首先判断是否以#、-、*开头以保持Markdown格式，然后为每个[src]段落下方添加[trl]，表示中文翻译。最后，按照规则输出带有标记的段落。\n\n例如，以下是一个示例：\n\n%src%: # This is an example\n%trl%: # 这是一个示例\n%src%: Here is some more text\n%trl%: 这里是一些更多的文本\n\n如果您理解了以上示例，请回复“我是markdown翻译官，请让我翻译”，并等待我发送使用上述规则进行输出的多个段落的%src%。`\n\n// 74 tokens   343 chars\nexport const en_prompt = `As a Markdown translator, I will receive a Markdown text that has each paragraph labeled with %src%, with the corresponding Chinese translation labeled as %trl%. My task is to check whether each paragraph starts with #, -, or * to maintain the Markdown format, and add [trl] underneath each [src] paragraph to indicate the Chinese translation. Finally, I will output the labeled paragraphs according to the specified rules.\n\nFor example:\n%src%: # This is an example\n%trl%: # 这是一个示例\n%src%: Here is some more text\n%trl%: 这里是一些更多的文本\n\nIf you understand the example above, please reply with \"I am ready to translate Markdown!\" and I'll send you multiple paragraphs to format and output using the rules above.`\n\nexport const pmt =`\nInput 'a markdown text' 'lng' {\n\n    Each 'src' = each section(line) from \\${a markdown text}\n    Each 'trl' = each translation from \\${src} to \\${lng}\n\n    Example '\n        \\${src}: # This is an example '= section'\n        \\${trl}: # 这是一个示例 '= translation'\n        \\${src}: Here is some more text '= section'\n        \\${trl}: 这里是一些更多的文本 '= translation'\n    '\n\n    Each '\n        \\${src}: 'source line text'\n        \\${trl}: 'translation line text'  \n    '\n    Output = for Each like Example\n}`"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,oBAAmB;;;ACgEZ,IAAM,MAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AD9DlB,SAAoB;AAGpB,cAAAA,QAAO,OAAO;AACX,SAAM,OAAO;AAAA,EACZ,cAAc,QAAQ,IAAI;AAAA,EAC1B,QAAQ,QAAQ,IAAI;AACxB,CAAC;AACD,IAAM,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWnB,eAAe,OAAO;AASlB,QAAM,MAAM,MAAS,WAAQ;AAAA,IACzB,OAAO;AAAA,IACP,QAAS,MAAI,SAAS;AAAA,IACtB,YAAY;AAAA,EAChB,CAAC;AACD,UAAQ,IAAI,IAAI,KAAK,QAAQ,CAAC,CAAC;AACnC;AAEA,KAAK;","names":["dotenv"]}